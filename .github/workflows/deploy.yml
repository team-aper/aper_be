name: Deploy to EC2 using Docker and ECR

on:
  push:
    branches:
      - dev
  pull_request:
    branches:
      - dev

jobs:
  checkout-setup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code with Submodules
        uses: actions/checkout@v3
        with:
          submodules: recursive
          fetch-depth: 0
          token: ${{ secrets.PAT_TOKEN }}

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '17'

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Update Submodule to latest commit
        run: git submodule update --remote --merge

  build-prepare:
    runs-on: ubuntu-latest
    needs: checkout-setup
    steps:
      - name: Create application-secret.yml from secret
        run: |
          mkdir -p ./src/main/resources/yml
          echo "${{ secrets.APPLICATION_SECRET_YML }}" > ./src/main/resources/yml/application-secret.yml

      - name: Add PEM file for SSL
        run: |
          mkdir -p ./src/main/resources/certs
          echo "${{ secrets.AMAZON_ROOT_CA1 }}" > ./src/main/resources/certs/AmazonRootCA1.pem

      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build with Gradle
        run: ./gradlew clean build

  docker-setup:
    runs-on: ubuntu-latest
    needs: build-prepare
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        run: aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin ${{ secrets.ECR_URI }}

      - name: Build Docker image
        run: docker build -t aper-repository .

      - name: Tag Docker image
        run: docker tag aper-repository:latest ${{ secrets.ECR_URI }}:latest

      - name: Push Docker image to ECR
        run: docker push ${{ secrets.ECR_URI }}:latest

  deploy:
    runs-on: ubuntu-latest
    needs: docker-setup
    steps:
      - name: Set ECR URI as environment variable
        run: echo "ECR_URI=${{ secrets.ECR_URI }}" >> $GITHUB_ENV

      - name: Login to ECR on EC2
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_PUBLIC_IP }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            aws ecr get-login-password --region ap-northeast-2 | sudo docker login --username AWS --password-stdin ${{ secrets.ECR_URI }}

      - name: Stop running containers on EC2
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_PUBLIC_IP }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            sudo docker ps -q | xargs -r sudo docker stop

      - name: Remove all containers on EC2
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_PUBLIC_IP }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            sudo docker ps -asq | xargs -r sudo docker rm

      - name: Delete images on EC2
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_PUBLIC_IP }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            sudo docker images -q | xargs -r sudo docker rmi -f

      - name: Prune unused Docker resources on EC2
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_PUBLIC_IP }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            sudo docker system prune -af

      - name: Deploy using Docker Compose
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_PUBLIC_IP }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd /home/ubuntu/docker-compose
            export ECR_URI=${{ secrets.ECR_URI }}
            sudo docker-compose down
            sudo docker-compose pull
            sudo docker-compose up -d
            sudo docker image prune -f