name: Deploy to Amazon ECS CI/CD

on:
  push:
    branches: [ "dev" ]

env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: aper-repository
  ECS_SERVICE: aper-service
  ECS_CLUSTER: aper-cluster
  ECS_TASK_DEFINITION: TaskRevision.json
  CONTAINER_NAME: aper-container

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Copy Secret
        env:
          CREATE_SECRET: ${{ secrets.APPLICATION_YML }}
          CREATE_SECRET_DIR: src/main/resources/yml
          CREATE_SECRET_DIR_FILE_NAME: application-secret.yml
        run: |
          mkdir -p $CREATE_SECRET_DIR
          echo "$CREATE_SECRET" | base64 --decode > $CREATE_SECRET_DIR/$CREATE_SECRET_DIR_FILE_NAME
          if [ $? -ne 0 ]; then
            echo "Failed to decode secret. Please ensure it is base64 encoded."
            exit 1
          fi

      - name: Build with Gradle
        run: ./gradlew build --warning-mode all

      - name: Run tests
        run: ./gradlew test --warning-mode all

      - name: Upload test reports
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: test-reports
          path: build/reports/tests/test

      - name: Configure AWS credentials
        if: success()
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        if: success()
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        if: success()
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Fill in the new image ID in the Amazon ECS task definition
        if: success()
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        if: success()
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
