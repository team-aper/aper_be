spring:
  config:
    import:
      - classpath:/yml/application-secret.yml
    activate:
      on-profile: local

  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: ${local-db.url}
    username: ${local-db.username}
    password: ${local-db.password}

  jpa:
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        jdbc:
          batch_size: 50
        dialect: org.hibernate.dialect.MySQL8Dialect
        format_sql: true
        use_sql_comments: true
    show-sql: true

  data:
    redis:
      host: ${local-redis.host}
      port: ${local-redis.port}
      password: ${local-redis.password}


  mail:
    host: smtp.gmail.com # 서버 호스트
    port: 587 # 서버 포트
    username: ${email-auth.username} # 이메일 발신자 아이디
    password: ${email-auth.password} # 앱 비밀번호
    properties:
      mail:
        smtp:
          auth: true # 사용자 인증 시도 여부
          connection timeout : 5000
          timeout: 5000 # Socket Read Timeout 시간(ms)
          write timeout: 5000
          starttls:
            enable: true # StartTLS 활성화 여부
            required: true

  elasticsearch:
    rest:
      uris: ${elasticsearch.rest.uris}
      username: ${elasticsearch.rest.username}
      password: ${elasticsearch.rest.password}

  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${google.client-id}
            client-secret: ${google.client-secret}
            scope: ${google.scope}
            redirect-uri: ${google.redirect-uri.local}
            authorization-grant-type: authorization_code

          kakao:
            client-id: ${kakao.client-id}
            client-secret: ${kakao.client-secret}
            scope: ${kakao.scope}
            redirect-uri: ${kakao.redirect-uri.local}
            client-authentication-method: post
            authorization-grant-type: authorization_code
            provider: kakao

          naver:
            client-id: ${naver.client-id}
            client-secret: ${naver.client-secret}
            scope: ${naver.scope}
            redirect-uri: ${naver.redirect-uri.local}
            client-authentication-method: post
            authorization-grant-type: authorization_code
            provider: naver

        provider:
          google:
            authorization-uri: https://accounts.google.com/o/oauth2/auth
            token-uri: https://oauth2.googleapis.com/token
            user-info-uri: https://www.googleapis.com/oauth2/v3/userinfo
            user-name-attribute: sub

          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id

          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response


#logging:
#    level:
#      root: DEBUG
#      org.apache.kafka: INFO
#      javax.management: INFO
#      sun.rmi: INFO
#      org.hibernate: WARN
#      org.springframework.kafka: INFO

springdoc:
  swagger-ui:
    path: /swagger-ui.html

  api-docs:
    path: /api-docs

  default-consumes-media-type: application/json

  default-produces-media-type: application/json

  # 해당 패턴에 매칭되는 controller만 swagger-ui에 노출
  paths-to-match:
    - /**
  # 현재 시큐리티를 통해 로그인 처리를 하고 있기 때문에 로그인에 대한 엔드포인트 추가
  show-login-endpoint: true

secret:
  key:
    access: ${jwt.secret.key.access}
    refresh: ${jwt.secret.key.refresh}

cloud:
  aws:
    region:
      static: ${aws.region.static}
    stack:
      auto: ${aws.stack.auto}
    credentials:
      accessKey: ${aws.credentials.accessKey}
      secretKey: ${aws.credentials.secretKey}
    s3:
      bucket: ${aws.s3.bucket}
server:
  port: 8080

iamport:
  api:
    key: ${iamport.api.key}
    secret: ${iamport.api.secret}

kafka:
  bootstrap-servers: ${kafka.bootstrap-servers}
  key-serializer: ${kafka.key-serializer}
  value-serializer: ${kafka.value-serializer}
  episodes-topic: ${kafka.episodes-topic}
  user-topic: ${kafka.user-topic}
  consumer-group-id: ${kafka.consumer-group-id}

slack:
  webhook:
    url: ${slack.url}
  enabled: false

security:
  authorization-header: ${security.authorization-header}
  authorization-key: ${security.authorization-key}
  bearer-prefix: ${security.bearer-prefix}
  access-token-expiration: ${security.access-token-expiration}
  refresh-token-expiration: ${security.refresh-token-expiration}